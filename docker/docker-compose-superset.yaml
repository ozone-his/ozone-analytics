services:
  superset:
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
       condition: service_completed_successfully
      env-substitution:
        condition: service_completed_successfully
    environment: &superset-env
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USERNAME=${SUPERSET_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_HOST=${ANALYTICS_DB_HOST}
      - ANALYTICS_DATASOURCE_NAME=${ANALYTICS_DATASOURCE_NAME}
      - SUPERSET_PUBLIC_URL=https://${SUPERSET_HOSTNAME}
      - KEYCLOAK_URL=https://${KEYCLOAK_HOSTNAME}
      - ISSUER_URL=https://${KEYCLOAK_HOSTNAME}/realms/ozone/
      - SUPERSET_CLIENT_SECRET=${SUPERSET_CLIENT_SECRET}
      - SUPERSET_CLIENT_ID=superset
      - ENABLE_OAUTH=${ENABLE_OAUTH}
      
    image: &superset-image mekomsolutions/superset-sso
    labels:
      traefik.enable: "true"
      traefik.http.routers.superset.rule: "Host(`${SUPERSET_HOSTNAME}`)"
      traefik.http.routers.superset.entrypoints: "websecure"
      traefik.http.services.superset.loadbalancer.server.port: 8088
    networks:
      - web
      - ozone-analytics
    restart: unless-stopped
    volumes: &superset-volumes
      - ${SUPERSET_CONFIG_PATH}/superset_config.py:/app/superset_config.py
      - ${SUPERSET_CONFIG_PATH}/security.py:/app/security.py
      - ${SUPERSET_CONFIG_PATH}/superset-init.sh:/app/superset-init.sh
      
  superset-worker:
    command: "celery --app=superset.tasks.celery_app:app worker --pool=gevent -Ofair -n worker1@%h --loglevel=INFO"
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
       condition: service_completed_successfully
    environment: *superset-env
    image: *superset-image
    restart: unless-stopped
    volumes: *superset-volumes
    networks:
      - ozone-analytics
    
  superset-init:
    command: "/app/superset-init.sh"
    depends_on:
      - postgresql
      - redis
    environment: *superset-env
    image: *superset-image
    restart: on-failure
    volumes:
      - ${SUPERSET_CONFIG_PATH}/superset_config.py:/app/superset_config.py
      - ${SUPERSET_CONFIG_PATH}/security.py:/app/security.py
      - ${SUPERSET_CONFIG_PATH}/superset-init.sh:/app/superset-init.sh
      - ${SUPERSET_DASHBOARDS_PATH}/:/dashboards/
    networks:
      - ozone-analytics
    
  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - ozone-analytics
    
  postgresql:
    shm_size: 2gb
    networks:
      - ozone-analytics

volumes:
  redis-data: ~
networks:
  ozone-analytics:
  web:
    external: true
    name: web