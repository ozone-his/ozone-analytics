version: '2.1'
 
services:
  openmrs-referenceapplication-mysql:
    restart: "always"
    image: mariadb:10.2
    command: "mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --log-bin --binlog-format=ROW  --server-id=2"
    environment:
      MYSQL_DATABASE: ${MYSQL_DB:-openmrs}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-Admin123}
      MYSQL_USER: ${MYSQL_USER:-openmrs}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-Admin123}
    ports:
      - "3306:3306"
    healthcheck:
      test: "exit 0"
    volumes:
      - openmrs-referenceapplication-mysql-data:/var/lib/mysql
 
  openmrs-referenceapplication:
    restart: "always"
    image: openmrs/openmrs-reference-application-distro:demo
    depends_on:
      - openmrs-referenceapplication-mysql
    ports:
      - "8080:8080"
    environment:
      DB_DATABASE: ${MYSQL_DB:-openmrs}
      DB_HOST: openmrs-referenceapplication-mysql
      DB_USERNAME: ${MYSQL_USER:-openmrs}
      DB_PASSWORD: ${MYSQL_PASSWORD:-Admin123}
      DB_CREATE_TABLES: 'true'
      DB_AUTO_UPDATE: 'true'
      MODULE_WEB_ADMIN: 'true'
  jobmanager:
    build:
      context: flink/server
    ports:
      - "8084:8081"
    command: jobmanager
    depends_on:
      - openmrs-referenceapplication-mysql
      - postgresql
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        io.tmp.dirs=/tmp/temp
    volumes:
      - flink-jobmanager-data:/tmp

  taskmanager:
    build:
      context: flink/server
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 8
        io.tmp.dirs=/tmp/temp
    volumes:
      - flink-taskmanager-data:/tmp
  job-submit:
    build:
      context: flink/client
    depends_on:
      taskmanager:
        condition: service_started
      postgresql:
        condition: service_healthy
    volumes: 
      - ./flink/pipelines/job.properties:/opt/flink/job.properties
      - ./flink/pipelines/job.jar:/opt/flink/job.jar
      - ./flink/liquidbase:/liquidbase
    environment:
      ANALYTICS_DB_HOST: ${POSTGRES_DB_HOST}
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD} 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/openmrs/"]
      timeout: 20s
  postgresql:
    image: postgres:13
    command: postgres -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Analystics
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD}
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_DB_USER: ${SUPERSET_DB_USER}
      SUPERSET_DB_PASSWORD: ${SUPERSET_DB_PASSWORD}
    volumes:
      - ${POSTGRES_DATADIR:-postgresql-data}:/var/lib/postgresql/data
      - "${SQL_SCRIPTS_PATH:-./sqls}/postgresql:/docker-entrypoint-initdb.d"
    ports:
      - "5432:5432"
  superset:
    build:
      context: superset/
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ANALYTICS_DATASOURCE_NAME=Postgres
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
      - ANALYTICS_DB_HOST=${POSTGRES_DB_HOST}
    restart: on-failure
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    ports:
      - "8088:8088"
    volumes:
      - ./superset/config/datasources:/etc/superset/datasources
  superset-worker:
    build:
      context: superset/
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
    restart: on-failure
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    command: "celery worker --app=superset.tasks.celery_app:app"
    volumes:
     - ./superset/config/datasources:/etc/superset/datasources
  redis:
    image: redis
    restart: on-failure
    volumes:
      - redis:/data

  superset-init:
    build:
      context: superset/
    environment:
      - DATABASE_HOST=postgresql
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SUPERSET_LOAD_EXAMPLES=${SUPERSET_LOAD_EXAMPLES}
      - ANALYTICS_DATASOURCE_NAME=Postgres
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
      - ANALYTICS_DB_HOST=${POSTGRES_DB_HOST}
    restart: on-failure
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    command: "/etc/superset/superset-init.sh"
    volumes:
      - ./superset/config/datasources:/etc/superset/datasources
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SUPERSET_LOAD_EXAMPLES=${SUPERSET_LOAD_EXAMPLES}
      - ANALYTICS_DATASOURCE_NAME=Postgres
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
      - ANALYTICS_DB_HOST=${POSTGRES_DB_HOST}
    restart: on-failure
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    command: "/etc/superset/superset-init.sh"
    volumes:
      - ./superset/config/datasources:/etc/superset/datasources
 
volumes:
   openmrs-referenceapplication-mysql-data:
   openmrs-referenceapplication-data:
   flink-jobmanager-data: ~
   flink-taskmanager-data: ~
   postgresql-data: ~
   redis: ~