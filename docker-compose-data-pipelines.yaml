version: '3.8'
services:
  # consul:
  #   image: consul
  #   restart: always
  #   container_name: consul
  #   volumes: 
  #     - consul-data:/consul/data:rw
  #   ports:
  #     - 8300:8300
  #     - 8301:8301
  #     # - 8301:8301/udp
  #     # - 8302:8302
  #     # - 8302:8302/udp
  #     # - 8400:8400
  #     - 8500:8500
  #     # - 53:53/udp
  #   command: consul agent -data-dir=/consul/data -dev -client=0.0.0.0
  # openmrs-referenceapplication:
  #   restart: on-failure
  #   image: openmrs/openmrs-reference-application-distro:demo
  #   depends_on:
  #     - mysql
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     DB_DATABASE: ${MYSQL_DB:-openmrs}
  #     DB_HOST: mysql
  #     DB_USERNAME: ${MYSQL_USER:-openmrs}
  #     DB_PASSWORD: ${MYSQL_PASSWORD:-Admin123}
  #     DB_CREATE_TABLES: 'true'
  #     DB_AUTO_UPDATE: 'true'
  #     MODULE_WEB_ADMIN: 'true'
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/openmrs/"]
  #     timeout: 20s
  #   volumes:
  #     - openmrs-referenceapplication-data:/usr/local/tomcat/.OpenMRS/
  zookeeper:
    restart: on-failure
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    volumes:
      - zookeeper-data:/zookeeper/data
      - zookeeper-txns:/zookeeper/txns
  kafka:
    restart: on-failure
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
     - 9092:9092

    environment:
     - CLUSTER_ID=5Yr1SIgYQz-b-dgRabWx4g
     - BROKER_ID=1
     - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    volumes:
      - kafka-data:/kafka/data
    depends_on:
      mysql:
        condition: service_healthy
  mysql:
    restart: on-failure
    image: mariadb:10.2
    command: "mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --log-bin --binlog-format=ROW  --server-id=2 --max_connections=1024"
    environment:
      MYSQL_DATABASE: ${MYSQL_DB:-openmrs}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-Admin123}
      MYSQL_USER: ${MYSQL_USER:-openmrs}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-Admin123}
    ports:
      - "3306:3306"
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    volumes:
      # - ./data/mysql:/var/lib/mysql:rw
      - mysql-data:/var/lib/mysql:rw
      - ./data/openmrs-data/openmrs-demo.sql:/docker-entrypoint-initdb.d/openmrs-demo.sql
  connect:
    restart: on-failure
    image: debezium/connect:${DEBEZIUM_VERSION}
    ports:
     - 8083:8083
    depends_on:

     - kafka
     - mysql
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
     - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
     - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
     - CONNECT_CONFIG_PROVIDERS=file
     - CONNECT_CONFIG_PROVIDERS_FILE_CLASS=org.apache.kafka.common.config.provider.FileConfigProvider
     - CONNECT_MYSQL_HOSTNAME=mysql
     - CONNECT_MYSQL_USERNAME=root
     - CONNECT_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-Admin123}
     - CONNECT_MYSQL_PORT=3306
     - CONNECT_MYSQL_SERVER_ID=2
     - CONNECT_MYSQL_SERVER_NAME=openmrs
     - CONNECT_MYSQL_INCLUDE_LIST=openmrs
     - CONNECT_MYSQL_HISTROY_TOPIC=dbhistory.openmrs
     - CONNECT_MYSQL_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./debezium-connect/jars/TimestampConverter-1.2.4-SNAPSHOT.jar:/kafka/connect/debezium-connector-mysql/TimestampConverter-1.2.4-SNAPSHOT.jar
  kowl:
    image: quay.io/cloudhut/kowl:master
    container_name: "kowl"
    restart: on-failure
    ports:
      - "8282:8080"
    environment:
      KAFKA_BROKERS: "kafka:9092"
    depends_on:
      - "kafka"
  postgresql:
    restart: on-failure
    image: postgres:13
    command: postgres -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Analystics
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD}
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_DB_USER: ${SUPERSET_DB_USER}
      SUPERSET_DB_PASSWORD: ${SUPERSET_DB_PASSWORD}
    volumes:
      - ${POSTGRES_DATADIR:-postgresql-data}:/var/lib/postgresql/data
      - "${SQL_SCRIPTS_PATH:-./sqls}/postgresql:/docker-entrypoint-initdb.d"
    ports:
      - "5432:5432"
  jobmanager:
    restart: on-failure
    build:
      context: ./mekom-flink-job
      # dockerfile: mekom-flink-job/Dockerfile
    image: mekomsolutions/flink-server
    ports:
      - "8084:8081"
    command: standalone-job --job-classname net.mekomsolutions.data.pipelines.streaming.StreamingETLJob --job-id 00000000000000000000000000000000 --properties-file /opt/flink/usrlib/job.properties --sink-url jdbc:postgresql://postgresql:5432/analytics --sink-username ${POSTGRES_USER} --sink-password ${POSTGRES_PASSWORD}
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started
      postgresql:
        condition: service_started
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        io.tmp.dirs: /tmp/temp
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/checkpoints/
        state.savepoints.dir: file:///tmp/savepoints
        execution.checkpointing.mode: EXACTLY_ONCE
        execution.checkpointing.unaligned: true  
        execution.checkpointing.interval: 30min
        execution.checkpointing.tolerable-failed-checkpoints: 100
        jobmanager.memory.process.size: 1000m
        state.checkpoints.num-retained: 5
        high-availability.storageDir: file:///tmp/ha
        high-availability: ZOOKEEPER
        high-availability.zookeeper.quorum: zookeeper:2181
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - FLINK_JOB_POSTGRES_USER=postgres
      - FLINK_JOB_POSTGRES_PASSWORD=password
      - FLINK_JOB_PROPERTIES_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - flink-shared-data:/tmp
      # - ./flink/pipelines:/opt/flink/usrlib
      # - ./flink/pipelines/job.properties:/opt/flink/job.properties
      - ./flink/pipelines/job.properties:/opt/flink/usrlib/job.properties
      - ./data:/data
  taskmanager:
    build:
      context: ./mekom-flink-job
      # dockerfile: mekom-flink-job/Dockerfile
    image: mekomsolutions/flink-server
    depends_on:
      jobmanager:
        condition: service_started
      zookeeper:
        condition: service_started
      # consul:
      #   condition: service_started
    #command: taskmanager --properties-file /opt/flink/usrlib/job.properties
    command: taskmanager --properties-file /opt/flink/usrlib/job.properties --sink-url jdbc:postgresql://postgresql:5432/analytics --sink-username ${POSTGRES_USER} --sink-password ${POSTGRES_PASSWORD}
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 6
        io.tmp.dirs: /tmp/temp
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/checkpoints/
        state.savepoints.dir: file:///tmp/savepoints
        execution.checkpointing.unaligned: true  
        execution.checkpointing.interval: 30min
        execution.checkpointing.tolerable-failed-checkpoints: 100
        taskmanager.memory.process.size: 6000m
        taskmanager.memory.managed.fraction: 0.8
        high-availability.storageDir: file:///tmp/ha
        high-availability: ZOOKEEPER
        high-availability.zookeeper.quorum: zookeeper:2181
        state.checkpoints.num-retained: 5
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - FLINK_JOB_POSTGRES_USER=postgres
      - FLINK_JOB_POSTGRES_PASSWORD=password
      - FLINK_JOB_PROPERTIES_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - flink-shared-data:/tmp
      # - ./flink/pipelines:/opt/flink/usrlib
      # - ./flink/pipelines/job.properties:/opt/flink/job.properties
      - ./flink/pipelines/job.properties:/opt/flink/usrlib/job.properties
      - ./data:/data
    restart: on-failure
  setup:
    build:
      context: setup
    depends_on:
      postgresql:
        condition: service_healthy
      connect:
        condition: service_started
    volumes: 
      - ./flink/liquibase:/liquibase/changelog
    environment:
      ANALYTICS_DB_HOST: ${POSTGRES_DB_HOST}
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD} 
      CONNECT_HOST: connect

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/openmrs/"]
      timeout: 20s
volumes:
   mysql-data:
   flink-shared-data: ~
   postgresql-data: ~
   redis: ~
   zookeeper-data: ~
   kafka-data: ~
   zookeeper-txns: ~
   consul-data: ~
   openmrs-referenceapplication-data: ~